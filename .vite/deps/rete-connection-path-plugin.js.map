{
  "version": 3,
  "sources": ["../../../animFlex/graph/node_modules/rete-connection-path-plugin/src/path-factory.ts", "../../../animFlex/graph/node_modules/rete-connection-path-plugin/src/transformers.ts", "../../../animFlex/graph/node_modules/rete-connection-path-plugin/src/utils.ts", "../../../animFlex/graph/node_modules/rete-connection-path-plugin/src/index.ts"],
  "sourcesContent": ["import { CurveFactoryLineOnly, line } from 'd3-shape'\n\nimport { Position } from './types'\n\nexport class PathFactory {\n  constructor(private curve: CurveFactoryLineOnly) {}\n\n  getData(points: Position[]) {\n    const getPath = line()\n      .x(d => d[0])\n      .y(d => d[1])\n      .curve(this.curve)\n\n    return getPath(points.map(p => [p.x, p.y]))\n  }\n}\n", "/**\n * Built-in transformers, defining the auxiliary points for the path.\n * @module\n */\n\nimport { Position, Transformer } from './types'\n\n/**\n * Linear transformer. Returns the same points.\n * @returns Two points\n * @throws Error if number of points is not equal to 2\n */\nexport const linear = (): Transformer => {\n  return points => {\n    if (points.length !== 2) throw new Error('number of points should be equal to 2')\n    const [start, end] = points\n\n    return [start, end]\n  }\n}\n\n/**\n * Classic transformer. Returns four points: start, auxiliary start, auxiliary end, end.\n * @param options Options\n * @param options.vertical If true, the auxiliary points will be placed vertically. Default: `false`\n * @param options.curvature The curvature of the path. Default: `0.3`\n * @returns Four points\n */\nexport const classic = (options: { vertical?: boolean, curvature?: number }): Transformer => {\n  const { vertical = false, curvature = 0.3 } = options\n\n  function add(a: Position, b: Position) {\n    return { x: a.x + b.x, y: a.y + b.y }\n  }\n  return points => {\n    if (points.length !== 2) throw new Error('number of points should be equal to 2')\n\n    const [start, end] = points\n    const xDistance = Math.abs(start.x - end.x)\n    const yDistance = Math.abs(start.y - end.y)\n    const crossDistance = vertical\n      ? xDistance\n      : yDistance\n    const alongDistance = vertical\n      ? yDistance\n      : xDistance\n    const offset = Math.max(crossDistance / 2, alongDistance) * curvature\n    const startOffset = vertical\n      ? { x: 0, y: offset }\n      : { y: 0, x: offset }\n    const endOffset = vertical\n      ? { x: 0, y: -offset }\n      : { y: 0, x: -offset }\n\n    return [start, add(start, startOffset), add(end, endOffset), end]\n  }\n}\n", "import { Position } from './types'\n\nexport function getAngle({ x: x1, y: y1 }: Position, { x: x2, y: y2 }: Position) {\n  const dx = x1 - x2\n  const dy = y1 - y2\n\n  return 180 * Math.atan2(dy, dx) / Math.PI\n}\n\nexport function getTransformAlong(path: SVGPathElement, offset: number, delta = 1, needRotate = true) {\n  const length = path.getTotalLength() * delta\n  const p1 = path.getPointAtLength(length + offset)\n  const p2 = path.getPointAtLength(length)\n  const angle = 180 + (needRotate\n    ? getAngle(p1, p2)\n    : 0)\n\n  return `translate(${p1.x}, ${p1.y}) rotate(${angle})`\n}\n", "import { curveBundle, CurveFactoryLineOnly } from 'd3-shape'\nimport { BaseSchemes, ConnectionId, Scope } from 'rete'\nimport { Area2DInherited } from 'rete-area-plugin'\nimport { classicConnectionPath } from 'rete-render-utils'\n\nimport { PathFactory } from './path-factory'\nimport * as Transformers from './transformers'\nimport { Position, Transformer } from './types'\nimport { getTransformAlong } from './utils'\n\nexport { Transformers }\n\ntype RenderProduces<Schemes extends BaseSchemes> =\n  | { type: 'connectionpath', data: { payload: Schemes['Connection'], path?: string, points: Position[] } }\n\n/**\n * Connection path plugin props\n */\nexport type Props<Schemes extends BaseSchemes> = {\n  /** The transformer function that defines auxiliary points for the path. Default: `Transformers.classic({})` */\n  transformer?: ((connection: Schemes['Connection']) => Transformer)\n  /** The curve factory function that defines the shape of the path. Default: `curveBundle.beta(0.9)` */\n  curve?: ((connection: Schemes['Connection']) => CurveFactoryLineOnly)\n  /** Customize/enable arrow. Allows to change arrow color (default: `steelblue`) and marker (default: `M-5,-10 L-5,10 L20,0 z)` */\n  arrow?: (connection: Schemes['Connection']) => boolean | { color?: string, marker?: string }\n}\n\n/**\n * Connection path plugin. Allows to customize connection path and arrow.\n * @listens connectionpath\n * @listens rendered\n */\nexport class ConnectionPathPlugin<Schemes extends BaseSchemes, K> extends Scope<never, [RenderProduces<Schemes>, ...Area2DInherited<Schemes, K>]> {\n  /**\n   * @constructor\n   * @param props Connection path plugin props\n   */\n  constructor(private props?: Props<Schemes>) {\n    super('connection-path')\n  }\n\n  arrows = new Map<ConnectionId, { marker: SVGPathElement }>()\n  transforms = new Map<ConnectionId, string>()\n\n  setParent(scope: Scope<RenderProduces<Schemes>, Area2DInherited<Schemes, K>>): void {\n    super.setParent(scope)\n\n    // eslint-disable-next-line max-statements,complexity\n    scope.addPipe(context => {\n      if (!context || typeof context !== 'object' || !('type' in context)) return context\n\n      if (context.type === 'connectionpath') {\n        const { points, payload } = context.data\n        const curve = this.props?.curve\n          ? this.props.curve(payload)\n          : curveBundle.beta(0.9)\n        const transformer = this.props?.transformer\n          ? this.props.transformer(payload)\n          : Transformers.classic({})\n        const factory = new PathFactory(curve)\n        const transformedPoints = transformer(points)\n        const path = factory.getData(transformedPoints)\n\n        const p = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\n        p.setAttribute('d', path ?? classicConnectionPath(transformedPoints as [Position, Position], 0.3))\n\n        this.transforms.set(payload.id, getTransformAlong(p, -15))\n        this.updateArrow(payload)\n\n        return path\n          ? {\n            ...context,\n            data: {\n              ...context.data,\n              path\n            }\n          }\n          : context\n      }\n      if (context.type === 'connectionremoved') {\n        const { id } = context.data\n\n        this.arrows.delete(id)\n        this.transforms.delete(id)\n      }\n      if (context.type === 'rendered' && context.data.type === 'connection') {\n        if (!this.props?.arrow || context.data.type !== 'connection') return\n        const payload = context.data.payload\n        const id = payload.id\n        const arrowData = this.getArrowData(payload)\n\n        if (this.arrows.has(id) || !arrowData) return\n\n        const el = context.data.element\n        const svgEl = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n        const marker = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\n        svgEl.setAttribute('style', 'position: absolute; overflow: visible !important; pointer-events: none')\n        svgEl.appendChild(marker)\n        el.appendChild(svgEl)\n\n        marker.classList.add('marker')\n\n        this.arrows.set(id, { marker })\n        this.updateArrow(payload)\n      }\n\n      return context\n    })\n  }\n\n  private getArrowData(c: Schemes['Connection']) {\n    if (!this.props?.arrow) return null\n    const data = this.props.arrow(c)\n\n    if (!data) return null\n    const { color = 'steelblue', marker = 'M-5,-10 L-5,10 L20,0 z' } = data === true\n      ? {}\n      : data\n\n    return { color, marker }\n  }\n\n  private updateArrow(c: Schemes['Connection']) {\n    const data = this.arrows.get(c.id)\n    const arrowData = this.getArrowData(c)\n\n    if (!data || !arrowData) return\n\n    const { color, marker } = arrowData\n\n    data.marker.setAttribute('fill', color)\n    data.marker.setAttribute('d', marker)\n\n    data.marker.setAttribute('transform', this.transforms.get(c.id) ?? '')\n  }\n}\n"],
  "mappings": "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",
  "names": ["PathFactory", "curve", "_classCallCheck", "_createClass", "key", "value", "getData", "points", "getPath", "line", "x", "d", "y", "map", "p", "linear", "length", "Error", "_points", "_slicedToArray", "start", "end", "classic", "options", "_options$vertical", "vertical", "_options$curvature", "curvature", "add", "a", "b", "_points2", "xDistance", "Math", "abs", "yDistance", "crossDistance", "alongDistance", "offset", "max", "startOffset", "endOffset", "getAngle", "_ref", "_ref2", "x1", "y1", "x2", "y2", "dx", "dy", "atan2", "PI", "getTransformAlong", "path", "delta", "arguments", "undefined", "needRotate", "getTotalLength", "p1", "getPointAtLength", "p2", "angle", "concat", "ConnectionPathPlugin", "_Scope", "props", "_this", "_callSuper", "_defineProperty", "Map", "_inherits", "setParent", "scope", "_this2", "_superPropGet", "addPipe", "context", "_typeof", "type", "_this2$props", "_this2$props2", "_context$data", "data", "payload", "curveBundle", "beta", "transformer", "Transformers", "factory", "transformedPoints", "document", "createElementNS", "setAttribute", "classicConnectionPath", "transforms", "set", "id", "updateArrow", "_objectSpread", "arrows", "_this2$props3", "arrow", "arrowData", "getArrowData", "has", "el", "element", "svgEl", "marker", "appendChild", "classList", "c", "_this$props", "_ref$color", "color", "_ref$marker", "_this$transforms$get", "get", "Scope"]
}
