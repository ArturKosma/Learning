{
  "version": 3,
  "sources": ["../../../animFlex/graph/node_modules/intersects/circle-point.js", "../../../animFlex/graph/node_modules/intersects/circle-circle.js", "../../../animFlex/graph/node_modules/intersects/line-circle.js", "../../../animFlex/graph/node_modules/intersects/circle-line.js", "../../../animFlex/graph/node_modules/intersects/box-circle.js", "../../../animFlex/graph/node_modules/intersects/circle-box.js", "../../../animFlex/graph/node_modules/intersects/line-point.js", "../../../animFlex/graph/node_modules/intersects/polygon-point.js", "../../../animFlex/graph/node_modules/intersects/polygon-circle.js", "../../../animFlex/graph/node_modules/intersects/circle-polygon.js", "../../../animFlex/graph/node_modules/intersects/ellipse-helper.js", "../../../animFlex/graph/node_modules/intersects/ellipse-circle.js", "../../../animFlex/graph/node_modules/intersects/circle-ellipse.js", "../../../animFlex/graph/node_modules/intersects/circleOutline-box.js", "../../../animFlex/graph/node_modules/intersects/circleOutline-line.js", "../../../animFlex/graph/node_modules/intersects/circleOutline-point.js", "../../../animFlex/graph/node_modules/intersects/lineToLine.js", "../../../animFlex/graph/node_modules/intersects/line-polygon.js", "../../../animFlex/graph/node_modules/intersects/polygon-line.js", "../../../animFlex/graph/node_modules/intersects/polygon-polygon.js", "../../../animFlex/graph/node_modules/intersects/polygon-box.js", "../../../animFlex/graph/node_modules/intersects/ellipse-line.js", "../../../animFlex/graph/node_modules/intersects/line-ellipse.js", "../../../animFlex/graph/node_modules/intersects/polygon-ellipse.js", "../../../animFlex/graph/node_modules/intersects/box-point.js", "../../../animFlex/graph/node_modules/intersects/box-box.js", "../../../animFlex/graph/node_modules/intersects/lineToPolygon.js", "../../../animFlex/graph/node_modules/intersects/line-line.js", "../../../animFlex/graph/node_modules/intersects/line-box.js", "../../../animFlex/graph/node_modules/intersects/box-line.js", "../../../animFlex/graph/node_modules/intersects/box-polygon.js", "../../../animFlex/graph/node_modules/intersects/ellipse-box.js", "../../../animFlex/graph/node_modules/intersects/box-ellipse.js", "../../../animFlex/graph/node_modules/intersects/box-circleOutline.js", "../../../animFlex/graph/node_modules/intersects/point-box.js", "../../../animFlex/graph/node_modules/intersects/point-polygon.js", "../../../animFlex/graph/node_modules/intersects/point-circle.js", "../../../animFlex/graph/node_modules/intersects/point-line.js", "../../../animFlex/graph/node_modules/intersects/ellipse-point.js", "../../../animFlex/graph/node_modules/intersects/point-ellipse.js", "../../../animFlex/graph/node_modules/intersects/point-circleOutline.js", "../../../animFlex/graph/node_modules/intersects/line-circleOutline.js", "../../../animFlex/graph/node_modules/intersects/ellipse-ellipse.js", "../../../animFlex/graph/node_modules/intersects/ellipse-polygon.js", "../../../animFlex/graph/node_modules/intersects/index.js"],
  "sourcesContent": ["'use strict'\n\n/**\n * circle-point collision\n * @param {number} x1 center of circle\n * @param {number} y1 center of circle\n * @param {radius} r1 radius of circle\n * @param {number} x2 point\n * @param {number} y2 point\n * @return {boolean}\n */\nmodule.exports = function circlePoint(x1, y1, r1, x2, y2)\n{\n    var x = x2 - x1\n    var y = y2 - y1\n    return x * x + y * y <= r1 * r1\n}\n", "'use strict'\n\n/**\n * circle-circle collision\n * @param {number} x1 center of circle 1\n * @param {number} y1 center of circle 1\n * @param {number} r1 radius of circle 1\n * @param {number} x2 center of circle 2\n * @param {number} y2 center of circle 2\n * @param {number} r2 radius of circle 2\n * @return {boolean}\n */\nmodule.exports = function circleCircle(x1, y1, r1, x2, y2, r2)\n{\n    var x = x1 - x2\n    var y = y2 - y1\n    var radii = r1 + r2\n    return x * x + y * y <= radii * radii\n}\n", "'use strict'\n\n/**\n * line-circle collision\n number @param {number} x1 point 1 of line\n number @param {number} y1 point 1 of line\n number @param {number} x2 point 2 of line\n number @param {number} y2 point 2 of line\n number @param {number} xc center of circle\n number @param {number} yc center of circle\n number @param {number} rc radius of circle\n */\nmodule.exports = function lineCircle(x1, y1, x2, y2, xc, yc, rc)\n{\n    var ac = [xc - x1, yc - y1]\n    var ab = [x2 - x1, y2 - y1]\n    var ab2 = dot(ab, ab)\n    var acab = dot(ac, ab)\n    var t = acab / ab2\n    t = (t < 0) ? 0 : t\n    t = (t > 1) ? 1 : t\n    var h = [(ab[0] * t + x1) - xc, (ab[1] * t + y1) - yc]\n    var h2 = dot(h, h)\n    return h2 <= rc * rc\n}\n\nfunction dot(v1, v2)\n{\n    return (v1[0] * v2[0]) + (v1[1] * v2[1])\n}\n", "'use strict'\n\nvar lineCircle = require('./line-circle')\n\n/**\n * circle-line collision\n * from http://stackoverflow.com/a/10392860/1955997\n * @param {number} xc center of circle\n * @param {number} yc center of circle\n * @param {radius} rc radius of circle\n * @param {number} x1 first point of line\n * @param {number} y1 first point of line\n * @param {number} x2 second point of line\n * @param {number} y2 second point of line\n * @return {boolean}\n */\nmodule.exports = function circleLine(xc, yc, rc, x1, y1, x2, y2)\n{\n    return lineCircle(x1, y1, x2, y2, xc, yc, rc)\n}\n", "'use strict'\n\n/**\n * box-circle collision\n * @param {number} xb top-left corner of box\n * @param {number} yb top-left corner of box\n * @param {number} wb width of box\n * @param {number} hb height of box\n * @param {number} xc center of circle\n * @param {number} yc center of circle\n * @param {number} rc radius of circle\n */\nmodule.exports = function boxCircle(xb, yb, wb, hb, xc, yc, rc)\n{\n    var hw = wb / 2\n    var hh = hb / 2\n    var distX = Math.abs(xc - (xb + wb / 2))\n    var distY = Math.abs(yc - (yb + hb / 2))\n\n    if (distX > hw + rc || distY > hh + rc)\n    {\n        return false\n    }\n\n    if (distX <= hw || distY <= hh)\n    {\n        return true\n    }\n\n    var x = distX - hw\n    var y = distY - hh\n    return x * x + y * y <= rc * rc\n}\n", "'use strict'\n\nvar boxCircle = require('./box-circle')\n\n/**\n * circle-box (axis-oriented rectangle) collision\n * from http://stackoverflow.com/a/402010/1955997\n * @param {number} xc center of circle\n * @param {number} yc center of circle\n * @param {radius} rc radius of circle\n * @param {number} xb top-left corner of rectangle\n * @param {number} yb top-left corner of rectangle\n * @param {number} wb width of rectangle\n * @param {number} hb height of rectangle\n */\nmodule.exports = function circleBox(xc, yc, rc, xb, yb, wb, hb)\n{\n    return boxCircle(xb, yb, wb, hb, xc, yc, rc)\n}\n", "'use strict'\n\nfunction distanceSquared(x1, y1, x2, y2)\n{\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))\n}\n\n/**\n * line-point collision\n * from https://stackoverflow.com/a/17693146/1955997\n * @param {number} x1 first point in line\n * @param {number} y1 first point in line\n * @param {number} x2 second point in line\n * @param {number} y2 second point in line\n * @param {number} xp point\n * @param {number} yp point\n * @param {number} [tolerance=1]\n * @return {boolean}\n */\nmodule.exports = function linePoint(x1, y1, x2, y2, xp, yp, tolerance)\n{\n    tolerance = tolerance || 1\n    return Math.abs(distanceSquared(x1, y1, x2, y2) - (distanceSquared(x1, y1, xp, yp) + distanceSquared(x2, y2, xp, yp))) <= tolerance\n}", "'use strict'\n\nconst linePoint = require('./line-point')\n\n/**\n * polygon-point collision\n * based on https://stackoverflow.com/a/17490923/1955997\n * @param {number[]} points [x1, y1, x2, y2, ... xn, yn] of polygon\n * @param {number} x of point\n * @param {number} y of point\n * @param {number} [tolerance=1] maximum distance of point to polygon's edges that triggers collision (see pointLine)\n */\nmodule.exports = function polygonPoint(points, x, y, tolerance)\n{\n    var length = points.length\n    var c = false\n    var i, j\n    for (i = 0, j = length - 2; i < length; i += 2)\n    {\n        if (((points[i + 1] > y) !== (points[j + 1] > y)) && (x < (points[j] - points[i]) * (y - points[i + 1]) / (points[j + 1] - points[i + 1]) + points[i]))\n        {\n            c = !c\n        }\n        j = i\n    }\n    if (c)\n    {\n        return true\n    }\n    for (i = 0; i < length; i += 2)\n    {\n        var p1x = points[i]\n        var p1y = points[i + 1]\n        var p2x, p2y\n        if (i === length - 2)\n        {\n            p2x = points[0]\n            p2y = points[1]\n        }\n        else\n        {\n            p2x = points[i + 2]\n            p2y = points[i + 3]\n        }\n        if (linePoint(p1x, p1y, p2x, p2y, x, y, tolerance))\n        {\n            return true\n        }\n    }\n    return false\n}\n", "var polygonPoint = require('./polygon-point')\nvar lineCircle = require('./line-circle')\n\n/**\n * polygon-circle collision\n * @param {number[]} points [x1, y1, x2, y2, ... xn, yn] of polygon\n * @param {number} xc center of circle\n * @param {number} yc center of circle\n * @param {number} rc radius of circle\n * @param {number} [tolerance=1] maximum distance of point to polygon's edges that triggers collision (see pointLine)\n */\nmodule.exports = function polygonCircle(points, xc, yc, rc, tolerance)\n{\n    if (polygonPoint(points, xc, yc, tolerance))\n    {\n        return true\n    }\n    var count = points.length\n    for (var i = 0; i < count - 2; i += 2)\n    {\n        if (lineCircle(points[i], points[i + 1], points[i + 2], points[i + 3], xc, yc, rc))\n        {\n            return true\n        }\n    }\n    return lineCircle(points[0], points[1], points[count - 2], points[count - 1], xc, yc, rc)\n}\n", "'use strict'\n\nvar polygonCircle = require('./polygon-circle')\n\n/**\n * circle-polygon collision\n * from http://stackoverflow.com/a/402019/1955997\n * @param {number} xc center of circle\n * @param {number} yc center of circle\n * @param {radius} rc radius of circle\n * @param {number[]} points [x1, y1, x2, y2, ... xn, yn] of polygon\n */\nmodule.exports = function circlePolygon(xc, yc, rc, points, tolerance)\n{\n    return polygonCircle(points, xc, yc, rc, tolerance)\n}\n", "// from http://yehar.com/blog/?p=2926\n\nvar MAX_ITERATIONS = 10\nvar innerPolygonCoef, outerPolygonCoef, initialized\n\nfunction initialize()\n{\n    innerPolygonCoef = []\n    outerPolygonCoef = []\n    for (var t = 0; t <= MAX_ITERATIONS; t++)\n    {\n        var numNodes = 4 << t\n        innerPolygonCoef[t] = 0.5 / Math.cos(4 * Math.acos(0) / numNodes)\n        outerPolygonCoef[t] = 0.5 / (Math.cos(2 * Math.acos(0) / numNodes) * Math.cos(2 * Math.acos(0) / numNodes))\n    }\n    initialized = true\n}\n\nfunction iterate(x, y, c0x, c0y, c2x, c2y, rr)\n{\n    for (var t = 1; t <= MAX_ITERATIONS; t++)\n    {\n        var c1x = (c0x + c2x) * innerPolygonCoef[t]\n        var c1y = (c0y + c2y) * innerPolygonCoef[t]\n        var tx = x - c1x\n        var ty = y - c1y\n        if (tx * tx + ty * ty <= rr)\n        {\n            return true\n        }\n        var t2x = c2x - c1x\n        var t2y = c2y - c1y\n        if (tx * t2x + ty * t2y >= 0 && tx * t2x + ty * t2y <= t2x * t2x + t2y * t2y &&\n            (ty * t2x - tx * t2y >= 0 || rr * (t2x * t2x + t2y * t2y) >= (ty * t2x - tx * t2y) * (ty * t2x - tx * t2y)))\n        {\n            return true\n        }\n        var t0x = c0x - c1x\n        var t0y = c0y - c1y\n        if (tx * t0x + ty * t0y >= 0 && tx * t0x + ty * t0y <= t0x * t0x + t0y * t0y &&\n            (ty * t0x - tx * t0y <= 0 || rr * (t0x * t0x + t0y * t0y) >= (ty * t0x - tx * t0y) * (ty * t0x - tx * t0y)))\n        {\n            return true\n        }\n        var c3x = (c0x + c1x) * outerPolygonCoef[t]\n        var c3y = (c0y + c1y) * outerPolygonCoef[t]\n        if ((c3x - x) * (c3x - x) + (c3y - y) * (c3y - y) < rr)\n        {\n            c2x = c1x\n            c2y = c1y\n            continue\n        }\n        var c4x = c1x - c3x + c1x\n        var c4y = c1y - c3y + c1y\n        if ((c4x - x) * (c4x - x) + (c4y - y) * (c4y - y) < rr)\n        {\n            c0x = c1x\n            c0y = c1y\n            continue\n        }\n        var t3x = c3x - c1x\n        var t3y = c3y - c1y\n        if (ty * t3x - tx * t3y <= 0 || rr * (t3x * t3x + t3y * t3y) > (ty * t3x - tx * t3y) * (ty * t3x - tx * t3y))\n        {\n            if (tx * t3x + ty * t3y > 0)\n            {\n                if (Math.abs(tx * t3x + ty * t3y) <= t3x * t3x + t3y * t3y || (x - c3x) * (c0x - c3x) + (y - c3y) * (c0y - c3y) >= 0)\n                {\n                    c2x = c1x\n                    c2y = c1y\n                    continue\n                }\n            } else if (-(tx * t3x + ty * t3y) <= t3x * t3x + t3y * t3y || (x - c4x) * (c2x - c4x) + (y - c4y) * (c2y - c4y) >= 0)\n            {\n                c0x = c1x\n                c0y = c1y\n                continue\n            }\n        }\n        return false\n    }\n    return false // Out of iterations so it is unsure if there was a collision. But have to return something.\n}\n\n// Test for collision between an ellipse of horizontal radius w0 and vertical radius h0 at (x0, y0) and\n// an ellipse of horizontal radius w1 and vertical radius h1 at (x1, y1)\nfunction ellipseEllipse(x0, y0, w0, h0, x1, y1, w1, h1)\n{\n    if (!initialized)\n    {\n        initialize()\n    }\n\n    var x = Math.abs(x1 - x0) * h1\n    var y = Math.abs(y1 - y0) * w1\n    w0 *= h1\n    h0 *= w1\n    var r = w1 * h1\n\n    if (x * x + (h0 - y) * (h0 - y) <= r * r || (w0 - x) * (w0 - x) + y * y <= r * r || x * h0 + y * w0 <= w0 * h0\n        || ((x * h0 + y * w0 - w0 * h0) * (x * h0 + y * w0 - w0 * h0) <= r * r * (w0 * w0 + h0 * h0) && x * w0 - y * h0 >= -h0 * h0 && x * w0 - y * h0 <= w0 * w0))\n    {\n        return true\n    }\n    else\n    {\n        if ((x - w0) * (x - w0) + (y - h0) * (y - h0) <= r * r || (x <= w0 && y - r <= h0) || (y <= h0 && x - r <= w0))\n        {\n            return iterate(x, y, w0, 0, 0, h0, r * r)\n        }\n        return false\n    }\n}\n\n// Test for collision between an ellipse of horizontal radius w and vertical radius h at (x0, y0) and\n// a circle of radius r at (x1, y1)\nfunction ellipseCircle(x0, y0, w, h, x1, y1, r)\n{\n    if (!initialized)\n    {\n        initialize()\n    }\n    var x = Math.abs(x1 - x0)\n    var y = Math.abs(y1 - y0)\n\n    if (x * x + (h - y) * (h - y) <= r * r || (w - x) * (w - x) + y * y <= r * r || x * h + y * w <= w * h\n        || ((x * h + y * w - w * h) * (x * h + y * w - w * h) <= r * r * (w * w + h * h) && x * w - y * h >= -h * h && x * w - y * h <= w * w))\n    {\n        return true\n    }\n    else\n    {\n        if ((x - w) * (x - w) + (y - h) * (y - h) <= r * r || (x <= w && y - r <= h) || (y <= h && x - r <= w))\n        {\n            return iterate(x, y, w, 0, 0, h, r * r)\n        }\n        return false\n    }\n}\n\nmodule.exports = {\n    ellipseCircle: ellipseCircle,\n    ellipseEllipse: ellipseEllipse\n}", "var ellipseHelper = require('./ellipse-helper')\n\n/**\n * ellipse-circle collision\n * @param {number} xe center of ellipse\n * @param {number} ye center of ellipse\n * @param {number} rex radius-x of ellipse\n * @param {number} rey radius-y of ellipse\n * @param {number} xc center of circle\n * @param {number} yc center of circle\n * @param {number} rc radius of circle\n * @return {boolean}\n */\nmodule.exports = function ellipseCircle(xe, ye, rex, rey, xc, yc, rc)\n{\n    return ellipseHelper.ellipseCircle(xe, ye, rex, rey, xc, yc, rc)\n}\n", "var ellipseCircle = require('./ellipse-circle')\n\n/**\n * circle-ellipse collision\n * @param {number} xc center of circle\n * @param {number} yc center of circle\n * @param {number} rc radius of circle\n * @param {number} xe center of ellipse\n * @param {number} ye center of ellipse\n * @param {number} rex radius-x of ellipse\n * @param {number} rey radius-y of ellipse\n * @return {boolean}\n */\nmodule.exports = function circleEllipse(xc, yc, rc, xe, ye, rex, rey)\n{\n    return ellipseCircle(xe, ye, rex, rey, xc, yc, rc)\n}\n", "var circlePoint = require('./circle-point')\nvar boxCircle = require('./box-circle')\n\n/**\n * circleOutline-box (axis-aligned) collision\n * @param {number} xc center of circle\n * @param {number} yc center of circle\n * @param {radius} rc radius of circle\n * @param {number} x top-left corner of box\n * @param {number} y top-left corner of box\n * @param {number} width of box\n * @param {number} height of box\n * @param {number} thickness of circle outline\n */\nmodule.exports = function circleOutlineBox(xc, yc, rc, x, y, width, height, thickness)\n{\n    thickness = thickness || 1\n    var count = 0\n    count += circlePoint(xc, yc, rc, x, y) ? 1 : 0\n    count += circlePoint(xc, yc, rc, x + width, y) ? 1 : 0\n    count += circlePoint(xc, yc, rc, x, y + height) ? 1 : 0\n    count += circlePoint(xc, yc, rc, x + width, y + height) ? 1 : 0\n\n    // if no corners are inside the circle, then intersects only if box encloses circle-outline\n    if (count === 0)\n    {\n        return boxCircle(x, y, width, height, xc, yc, rc)\n    }\n\n    // if one corner is inside and one corner is outside then box intersects circle-outline\n    if (count >= 1 && count <= 3)\n    {\n        return true\n    }\n\n    // last check is if box is inside circle, need to check that a corner is not inside the inner circle\n    if (count === 4)\n    {\n        return !circlePoint(xc, yc, rc - thickness, x, y) ||\n            !circlePoint(xc, yc, rc - thickness, x + width, y) ||\n            !circlePoint(xc, yc, rc - thickness, x, y + height) ||\n            !circlePoint(xc, yc, rc - thickness, x + width, y + height)\n    }\n}", "var lineCircle = require('./line-circle')\nvar circlePoint = require('./circle-point')\n\n/**\n * circleOutline-line collision\n * @param {number} xc center of circle\n * @param {number} yc center of circle\n * @param {radius} rc radius of circle\n * @param {number} x1 of point 1 of line\n * @param {number} y1 of point 1 of line\n * @param {number} x2 of point 2 of line\n * @param {number} y2 of point 2 of line\n * @param {number} thickness of circle outline\n */\nmodule.exports = function circleOutlineLine(xc, yc, rc, x1, y1, x2, y2, thickness)\n{\n    thickness = thickness || 1\n    return lineCircle(x1, y1, x2, y2, xc, yc, rc) && !(circlePoint(xc, yc, rc - thickness, x1, y1) && circlePoint(xc, yc, rc - thickness, x2, y2))\n}", "var circlePoint = require('./circle-point')\n\n/**\n * circleOutline-point collision\n * @param {number} xc center of circle\n * @param {number} yc center of circle\n * @param {radius} rc radius of circle\n * @param {number} x of point\n * @param {number} y of point\n * @param {number} thickness of circle outline\n */\nmodule.exports = function circleOutlinePoint(xc, yc, rc, x, y, thickness)\n{\n    thickness = thickness || 1\n    return circlePoint(xc, yc, rc, x, y) && !circlePoint(xc, yc, rc - thickness, x, y)\n}", "'use strict'\n\n/**\n * lineToLine helper function (to avoid circular dependencies)\n * from http://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect\n * @param {number} x1 first point in line 1\n * @param {number} y1 first point in line 1\n * @param {number} x2 second point in line 1\n * @param {number} y2 second point in line 1\n * @param {number} x3 first point in line 2\n * @param {number} y3 first point in line 2\n * @param {number} x4 second point in line 2\n * @param {number} y4 second point in line 2\n * @return {boolean}\n */\nmodule.exports = function lineToLine(x1, y1, x2, y2, x3, y3, x4, y4)\n{\n    var s1_x = x2 - x1\n    var s1_y = y2 - y1\n    var s2_x = x4 - x3\n    var s2_y = y4 - y3\n    var s = (-s1_y * (x1 - x3) + s1_x * (y1 - y3)) / (-s2_x * s1_y + s1_x * s2_y)\n    var t = (s2_x * (y1 - y3) - s2_y * (x1 - x3)) / (-s2_x * s1_y + s1_x * s2_y)\n    return s >= 0 && s <= 1 && t >= 0 && t <= 1\n}", "var polygonPoint = require('./polygon-point')\nvar lineLine = require('./lineToLine')\n\n/**\n * line-polygon collision\n @param {number} x1 point 1 of line\n @param {number} y1 point 1 of line\n @param {number} x2 point 2 of line\n @param {number} y2 point 2 of line\n @param {number[]} points of polygon\n @param {tolerance=1} maximum distance of point to polygon's edges that triggers collision (see pointLine)\n */\nmodule.exports = function linePolygon(x1, y1, x2, y2, points, tolerance)\n{\n    var length = points.length\n\n    // check if first point is inside the shape (this covers if the line is completely enclosed by the shape)\n    if (polygonPoint(points, x1, y1, tolerance))\n    {\n        return true\n    }\n\n    // check for intersections for all of the sides\n    for (var i = 0; i < length; i += 2)\n    {\n        var j = (i + 2) % length\n        if (lineLine(x1, y1, x2, y2, points[i], points[i + 1], points[j], points[j + 1]))\n        {\n            return true\n        }\n    }\n    return false\n}\n", "var linePolygon = require('./line-polygon')\n\n/**\n * polygon-line collisions\n * @param {number[]} points [x1, y1, x2, y2, ... xn, yn] of polygon\n * @param {number} x1 first point in line\n * @param {number} y1 first point in line\n * @param {number} x2 second point in line\n * @param {number} y2 second point in line\n * @param {tolerance=1} maximum distance of point to polygon's edges that triggers collision (see pointLine)\n * @return {boolean}\n */\nmodule.exports = function polygonLine(points, x1, y1, x2, y2, tolerance)\n{\n    return linePolygon(x1, y1, x2, y2, points, tolerance)\n}\n", "'use strict'\n\n/**\n * polygon-polygon collision\n * based on http://stackoverflow.com/questions/10962379/how-to-check-intersection-between-2-rotated-rectangles\n * @param {number[]} points1 [x1, y1, x2, y2, ... xn, yn] of first polygon\n * @param {number[]} points2 [x1, y1, x2, y2, ... xn, yn] of second polygon\n * @return {boolean}\n */\nmodule.exports = function polygonPolygon(points1, points2)\n{\n    var a = points1\n    var b = points2\n    var polygons = [a, b]\n    var minA, maxA, projected, minB, maxB, j\n    for (var i = 0; i < polygons.length; i++)\n    {\n        var polygon = polygons[i]\n        for (var i1 = 0; i1 < polygon.length; i1 += 2)\n        {\n            var i2 = (i1 + 2) % polygon.length\n            var normal = { x: polygon[i2 + 1] - polygon[i1 + 1], y: polygon[i1] - polygon[i2] }\n            minA = maxA = null\n            for (j = 0; j < a.length; j += 2)\n            {\n                projected = normal.x * a[j] + normal.y * a[j + 1]\n                if (minA === null || projected < minA)\n                {\n                    minA = projected\n                }\n                if (maxA === null || projected > maxA)\n                {\n                    maxA = projected\n                }\n            }\n            minB = maxB = null\n            for (j = 0; j < b.length; j += 2)\n            {\n                projected = normal.x * b[j] + normal.y * b[j + 1]\n                if (minB === null || projected < minB)\n                {\n                    minB = projected\n                }\n                if (maxB === null || projected > maxB)\n                {\n                    maxB = projected\n                }\n            }\n            if (maxA < minB || maxB < minA)\n            {\n                return false\n            }\n        }\n    }\n    return true\n}\n", "'use strict'\n\nvar polygonPolygon = require('./polygon-polygon')\n\n/**\n * polygon-box collision\n * @param {number[]} points [x1, y1, x2, y2, ... xn, yn] of polygon\n * @param {number} x of box\n * @param {number} y of box\n * @param {number} w of box\n * @param {number} h of box\n */\nmodule.exports = function polygonBox(points, x, y, w, h)\n{\n    var points2 = [x, y, x + w, y, x + w, y + h, x, y + h]\n    return polygonPolygon(points, points2)\n}\n", "/**\n * ellipse-line collision\n * adapted from http://csharphelper.com/blog/2017/08/calculate-where-a-line-segment-and-an-ellipse-intersect-in-c/\n * @param {number} xe center of ellipse\n * @param {number} ye center of ellipse\n * @param {number} rex radius-x of ellipse\n * @param {number} rey radius-y of ellipse\n * @param {number} x1 first point of line\n * @param {number} y1 first point of line\n * @param {number} x2 second point of line\n * @param {number} y2 second point of line\n */\nmodule.exports = function ellipseLine(xe, ye, rex, rey, x1, y1, x2, y2)\n{\n    x1 -= xe\n    x2 -= xe\n    y1 -= ye\n    y2 -= ye\n\n    var A = Math.pow(x2 - x1, 2) / rex / rex + Math.pow(y2 - y1, 2) / rey / rey\n    var B = 2 * x1 * (x2 - x1) / rex / rex + 2 * y1 * (y2 - y1) / rey / rey\n    var C = x1 * x1 / rex / rex + y1 * y1 / rey / rey - 1\n    var D = B * B - 4 * A * C\n    if (D === 0)\n    {\n        var t = -B / 2 / A\n        return t >= 0 && t <= 1\n    }\n    else if (D > 0)\n    {\n        var sqrt = Math.sqrt(D)\n        var t1 = (-B + sqrt) / 2 / A\n        var t2 = (-B - sqrt) / 2 / A\n        return (t1 >= 0 && t1 <= 1) || (t2 >= 0 && t2 <= 1)\n    }\n    else\n    {\n        return false\n    }\n}", "var ellipseLine = require('./ellipse-line')\n\n/**\n * line-ellipse collision\n * @param {number} x1 first point of line\n * @param {number} y1 first point of line\n * @param {number} x2 second point of line\n * @param {number} y2 second point of line\n * @param {number} xe center of ellipse\n * @param {number} ye center of ellipse\n * @param {number} rx radius-x of ellipse\n * @param {number} ry radius-y of ellipse\n */\nmodule.exports = function lineEllipse(x1, y1, x2, y2, xe, ye, rex, rey)\n{\n    return ellipseLine(xe, ye, rex, rey, x1, y1, x2, y2)\n}", "var polygonPoint = require('./polygon-point')\nvar lineEllipse = require('./line-ellipse')\n\n/**\n * polygon-ellipse collision\n * @param {number[]} points [x1, y1, x2, y2, ... xn, yn] of polygon\n * @param {number} xe center of ellipse\n * @param {number} ye center of ellipse\n * @param {number} rex radius-x of ellipse\n * @param {number} rey radius-y of ellipse\n */\nmodule.exports = function polygonEllipse(points, xe, ye, rex, rey)\n{\n    if (polygonPoint(points, xe, ye))\n    {\n        return true\n    }\n    var count = points.length\n    for (var i = 0; i < count - 2; i += 2)\n    {\n        if (lineEllipse(points[i], points[i + 1], points[i + 2], points[i + 3], xe, ye, rex, rey))\n        {\n            return true\n        }\n    }\n    return lineEllipse(points[0], points[1], points[count - 2], points[count - 1], xe, ye, rex, rey)\n}", "'use strict'\n\n/**\n * box-point collision\n * @param {number} x1 top-left corner of box\n * @param {number} y1 top-left corner of box\n * @param {number} w1 width of box\n * @param {number} h1 height of box\n * @param {number} x2 of point\n * @param {number} y2 of point\n * @return {boolean}\n */\nmodule.exports = function boxPoint(x1, y1, w1, h1, x2, y2)\n{\n    return x2 >= x1 && x2 <= x1 + w1 && y2 >= y1 && y2 <= y1 + h1\n}\n", "'use strict'\n\n/**\n * box-box collision\n * @param {number} x1 top-left corner of first box\n * @param {number} y1 top-left corner of first box\n * @param {number} w1 width of first box\n * @param {number} h1 height of first box\n * @param {number} x2 top-left corner of second box\n * @param {number} y2 top-left corner of second box\n * @param {number} w2 width of second box\n * @param {number} h2 height of second box\n */\nmodule.exports = function boxBox(x1, y1, w1, h1, x2, y2, w2, h2)\n{\n    return x1 < x2 + w2 && x1 + w1 > x2 && y1 < y2 + h2 && y1 + h1 > y2\n}\n", "'use strict'\n\n/**\n * turns a line into a polygon using thickness\n * @param {number} x1 first point of line\n * @param {number} y1 first point of line\n * @param {number} x2 second point of line\n * @param {number} y2 second point of line\n * @param {number} thickness of line\n */\nmodule.exports = function lineToPolygon(x1, y1, x2, y2, thickness)\n{\n    const angle = Math.atan2(y2 - y1, x2 - x1) - Math.PI / 2\n    const half = thickness / 2\n    const cos = Math.cos(angle) * half\n    const sin = Math.sin(angle) * half\n    return [\n        x1 - cos, y1 - sin,\n        x2 - cos, y2 - sin,\n        x2 + cos, y2 + sin,\n        x1 + cos, y1 + sin\n    ]\n}", "'use strict'\n\nconst lineToPolygon = require('./lineToPolygon')\nconst polygonPolygon = require('./polygon-polygon')\nconst linePolygon = require('./line-polygon')\nconst lineToLine = require('./lineToLine')\n\n/**\n * line-line collision\n * from http://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect\n * @param {number} x1 first point in line 1\n * @param {number} y1 first point in line 1\n * @param {number} x2 second point in line 1\n * @param {number} y2 second point in line 1\n * @param {number} x3 first point in line 2\n * @param {number} y3 first point in line 2\n * @param {number} x4 second point in line 2\n * @param {number} y4 second point in line 2\n * @param {number} [thickness1] of line 1 (the line is centered in its thickness--see demo)\n * @param {number} [thickness2] of line 2 (the line is centered in its thickness--see demo)\n * @return {boolean}\n */\nmodule.exports = function lineLine(x1, y1, x2, y2, x3, y3, x4, y4, thickness1, thickness2)\n{\n    if (thickness1 || thickness2)\n    {\n        return lineLineThickness(x1, y1, x2, y2, x3, y3, x4, y4, thickness1, thickness2)\n    }\n    else\n    {\n        return lineToLine(x1, y1, x2, y2, x3, y3, x4, y4)\n    }\n}\n\nfunction lineLineThickness(x1, y1, x2, y2, x3, y3, x4, y4, thickness1, thickness2)\n{\n    if (thickness1 && thickness2)\n    {\n        return polygonPolygon(lineToPolygon(x1, y1, x2, y2, thickness1), lineToPolygon(x3, y3, x4, y4, thickness2))\n    }\n    else if (thickness1)\n    {\n        return linePolygon(x3, y3, x4, y4, lineToPolygon(x1, y1, x2, y2, thickness1))\n    }\n    else if (thickness2)\n    {\n        return linePolygon(x1, y1, x2, y2, lineToPolygon(x3, y3, x4, y4, thickness1))\n    }\n}", "'use strict'\n\nvar boxPoint = require('./box-point')\nvar lineLine = require('./line-line')\n\n/**\n * line-box collision\n number @param {number} x1 point 1 of line\n number @param {number} y1 point 1 of line\n number @param {number} x2 point 2 of line\n number @param {number} y2 point 2 of line\n number @param {number} xb top-left of box\n number @param {number} yb top-left of box\n number @param {number} wb width of box\n number @param {number} hb height of box\n */\nmodule.exports = function lineBox(x1, y1, x2, y2, xb, yb, wb, hb)\n{\n    if (boxPoint(xb, yb, wb, hb, x1, y1) || boxPoint(xb, yb, wb, hb, x2, y2))\n    {\n        return true\n    }\n    return lineLine(x1, y1, x2, y2, xb, yb, xb + wb, yb) ||\n        lineLine(x1, y1, x2, y2, xb + wb, yb, xb + wb, yb + hb) ||\n        lineLine(x1, y1, x2, y2, xb, yb + hb, xb + wb, yb + hb) ||\n        lineLine(x1, y1, x2, y2, xb, yb, xb, yb + hb)\n}\n", "'use strict'\n\nvar lineBox = require('./line-box')\n\n/**\n * box-line collision\n * @param {number} xb top-left corner of box\n * @param {number} yb top-left corner of box\n * @param {number} wb width of box\n * @param {number} hb height of box\n * @param {number} x1 first point of line\n * @param {number} y1 first point of line\n * @param {number} x2 second point of line\n * @param {number} y2 second point of line\n */\nmodule.exports = function boxLine(xb, yb, wb, hb, x1, y1, x2, y2)\n{\n    return lineBox(x1, y1, x2, y2, xb, yb, wb, hb)\n}\n", "'use strict'\n\nvar polygonBox = require('./polygon-box')\n\n/**\n * box-polygon collision\n * @param {number} xb top-left corner of box\n * @param {number} yb top-left corner of box\n * @param {number} wb width of box\n * @param {number} hb height of box\n * @param {number[]} points of polygon\n */\nmodule.exports = function boxPolygon(xb, yb, wb, hb, points)\n{\n    return polygonBox(points, xb, yb, wb, hb)\n}\n", "var ellipseLine = require('./ellipse-line')\nvar boxPoint = require('./box-point')\n\n/**\n * ellipse-box (axis-oriented rectangle) collision\n * @param {number} xe center of ellipse\n * @param {number} ye center of ellipse\n * @param {radius} rex radius-x of ellipse\n * @param {radius} rey radius-y of ellipse\n * @param {number} xb top-left corner of box\n * @param {number} yb top-left corner of box\n * @param {number} wb width of box\n * @param {number} hb height of box\n */\nmodule.exports = function ellipseBox(xe, ye, rex, rey, xb, yb, wb, hb)\n{\n    return boxPoint(xb, yb, wb, hb, xe, ye) ||\n        ellipseLine(xe, ye, rex, rey, xb, yb, xb + wb, yb) ||\n        ellipseLine(xe, ye, rex, rey, xb, yb + hb, xb + wb, yb + hb) ||\n        ellipseLine(xe, ye, rex, rey, xb, yb, xb, yb + hb) ||\n        ellipseLine(xe, ye, rex, rey, xb + wb, yb, xb + wb, yb + hb)\n}", "var ellipseBox = require('./ellipse-box')\n\n/**\n * box-ellipse (axis-oriented rectangle) collision\n * @param {number} xb top-left corner of rectangle\n * @param {number} yb top-left corner of rectangle\n * @param {number} wb width of rectangle\n * @param {number} hb height of rectangle\n * @param {number} xe center of ellipse\n * @param {number} ye center of ellipse\n * @param {radius} rex radius-x of ellipse\n * @param {radius} rey radius-y of ellipse\n */\nmodule.exports = function boxEllipse(xb, yb, wb, hb, xe, ye, rex, rey)\n{\n    return ellipseBox(xe, ye, rex, rey, xb, yb, wb, hb)\n}", "var circleOutlineBox = require('./circleOutline-box')\n\n/**\n * circleOutline-box (axis-aligned) collision\n * @param {number} xc center of circle\n * @param {number} yc center of circle\n * @param {radius} rc radius of circle\n * @param {number} x top-left corner of box\n * @param {number} y top-left corner of box\n * @param {number} width of box\n * @param {number} height of box\n * @param {number} thickness of circle outline\n */\nmodule.exports = function boxCircleOutline(x, y, width, height, xc, yc, rc, thickness)\n{\n    return circleOutlineBox(xc, yc, rc, x, y, width, height, thickness)\n}", "'use strict'\n\nvar boxPoint = require('./box-point')\n\n/**\n * point-box collision\n * @param {number} x1 point\n * @param {number} y1 point\n * @param {number} xb top-left corner of box\n * @param {number} yb top-left corner of box\n * @param {number} wb width of box\n * @param {number} hb height of box\n * @return {boolean}\n */\nmodule.exports = function pointBox(x1, y1, xb, yb, wb, hb)\n{\n    return boxPoint(xb, yb, wb, hb, x1, y1)\n}\n", "'use strict'\n\nvar polygonPoint = require('./polygon-point')\n\n/**\n * polygon-point collision\n * based on https://stackoverflow.com/a/17490923/1955997\n * @param {number} x1\n * @param {number} y1\n * @param {number[]} points\n * @param {number} [tolerance=1] maximum distance of point to polygon's edges that triggers collision (see pointLine)\n * @return {boolean}\n */\nmodule.exports = function pointPolygon(x1, y1, points, tolerance)\n{\n    return polygonPoint(points, x1, y1, tolerance)\n}\n", "'use strict'\n\nvar circlePoint = require('./circle-point')\n\nmodule.exports = function pointCircle(x1, y1, xc, yc, rc)\n{\n    return circlePoint(xc, yc, rc, x1, y1)\n}\n", "'use strict'\n\nvar linePoint = require('./line-point')\n\n/**\n * point-line collision\n * @param {number} xp point\n * @param {number} yp point\n * @param {number} x1 first point in line\n * @param {number} y1 first point in line\n * @param {number} x2 second point in line\n * @param {number} y2 second point in line\n * @return {boolean}\n */\nmodule.exports = function pointLine(xp, yp, x1, y1, x2, y2)\n{\n    return linePoint(x1, y1, x2, y2, xp, yp)\n}\n", "/**\n * ellipse-point collision\n * @param {number} xe center of ellipse\n * @param {number} ye center of ellipse\n * @param {radius} rex radius-x of ellipse\n * @param {radius} rey radius-y of ellipse\n * @param {number} x1 point\n * @param {number} y1 point\n * @return {boolean}\n */\nmodule.exports = function ellipsePoint(xe, ye, rex, rey, x1, y1)\n{\n    var x = Math.pow(x1 - xe, 2) / (rex * rex)\n    var y = Math.pow(y1 - ye, 2) / (rey * rey)\n    return x + y <= 1\n}\n", "var ellipsePoint = require('./ellipse-point')\n\n/**\n * point-ellipse collision\n * @param {number} x1 point\n * @param {number} y1 point\n * @param {number} xe center of ellipse\n * @param {number} ye center of ellipse\n * @param {radius} rex radius-x of ellipse\n * @param {radius} rey radius-y of ellipse\n * @return {boolean}\n */\nmodule.exports = function pointEllipse(x1, y1, xe, ye, rex, rey)\n{\n    return ellipsePoint(xe, ye, rex, rey, x1, y1)\n}", "var circleOutlinePoint = require('./circleOutline-point')\n\n/**\n * point-circleOutline collision\n * @param {number} x of point\n * @param {number} y of point\n * @param {number} xc center of circle\n * @param {number} yc center of circle\n * @param {radius} rc radius of circle\n * @param {number} thickness of circle outline\n */\nmodule.exports = function pointCircleOutline(x, y, xc, yc, rc, thickness)\n{\n    return circleOutlinePoint(x, y, xc, yc, rc, thickness)\n}", "var circleOutlineLine = require('./circleOutline-line')\n\n/**\n * line-circleOutline collision\n * @param {number} x1 of point 1 of line\n * @param {number} y1 of point 1 of line\n * @param {number} x2 of point 2 of line\n * @param {number} y2 of point 2 of line\n * @param {number} xc center of circle\n * @param {number} yc center of circle\n * @param {radius} rc radius of circle\n * @param {number} thickness of circle outline\n */\nmodule.exports = function lineCircleOutline(x1, y1, x2, y2, xc, yc, rc, thickness)\n{\n    return circleOutlineLine(xc, yc, rc, x1, y1, x2, y2, thickness)\n}", "var ellipseHelper = require('./ellipse-helper')\n\n/**\n * ellipse-ellipse collision\n * @param {number} x1 center of ellipse 1\n * @param {number} y1 center of ellipse 1\n * @param {number} r1x radius-x of ellipse 1\n * @param {number} r1y radius-y of ellipse 1\n * @param {number} x2 center of ellipse 2\n * @param {number} y2 center of ellipse 2\n * @param {number} r2x radius of ellipse 2\n * @param {number} r2y radius of ellipse 2\n * @return {boolean}\n */\nmodule.exports = function ellipseEllipse(x1, y1, r1x, r1y, x2, y2, r2x, r2y)\n{\n    return ellipseHelper.ellipseEllipse(x1, y1, r1x, r1y, x2, y2, r2x, r2y)\n}\n", "var polygonEllipse = require('./polygon-ellipse')\n\n/**\n * ellipse-polygon collision\n * @param {number} xe center of ellipse\n * @param {number} ye center of ellipse\n * @param {number} rex radius-x of ellipse\n * @param {number} rey radius-y of ellipse\n * @param {number[]} points [x1, y1, x2, y2, ... xn, yn] of polygon\n */\nmodule.exports = function ellipsePolygon(xe, ye, rex, rey, points)\n{\n    return polygonEllipse(points, xe, ye, rex, rey)\n}", "module.exports = {\n    circlePoint: require('./circle-point'),\n    circleCircle: require('./circle-circle'),\n    circleLine: require('./circle-line'),\n    circleBox: require('./circle-box'),\n    circlePolygon: require('./circle-polygon'),\n    circleEllipse: require('./circle-ellipse'),\n    // circleCircleOutline: require('./circle-circleOutline'),\n\n    circleOutlineBox: require('./circleOutline-box'),\n    circleOutlineLine: require('./circleOutline-line'),\n    circleOutlinePoint: require('./circleOutline-point'),\n    // circleOutlineCircle: require('./circleOutline-circle'),\n\n    polygonPoint: require('./polygon-point'),\n    polygonLine: require('./polygon-line'),\n    polygonPolygon: require('./polygon-polygon'),\n    polygonBox: require('./polygon-box'),\n    polygonCircle: require('./polygon-circle'),\n    polygonEllipse: require('./polygon-ellipse'),\n\n    boxPoint: require('./box-point'),\n    boxBox: require('./box-box'),\n    boxLine: require('./box-line'),\n    boxPolygon: require('./box-polygon'),\n    boxCircle: require('./box-circle'),\n    boxEllipse: require('./box-ellipse'),\n    boxCircleOutline: require('./box-circleOutline'),\n\n    pointBox: require('./point-box'),\n    pointPolygon: require('./point-polygon'),\n    pointCircle: require('./point-circle'),\n    pointLine: require('./point-line'),\n    pointEllipse: require('./point-ellipse'),\n    pointCircleOutline: require('./point-circleOutline'),\n\n    lineLine: require('./line-line'),\n    lineBox: require('./line-box'),\n    linePolygon: require('./line-polygon'),\n    lineCircle: require('./line-circle'),\n    linePoint: require('./line-point'),\n    lineEllipse: require('./line-ellipse'),\n    lineCircleOutline: require('./line-circleOutline'),\n\n    ellipsePoint: require('./ellipse-point'),\n    ellipseLine: require('./ellipse-line'),\n    ellipseBox: require('./ellipse-box'),\n    ellipseCircle: require('./ellipse-circle'),\n    ellipseEllipse: require('./ellipse-ellipse'),\n    ellipsePolygon: require('./ellipse-polygon')\n}"],
  "mappings": "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",
  "names": []
}
